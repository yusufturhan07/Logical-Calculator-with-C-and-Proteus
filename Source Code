// Program for LCD Interfacing with 8051 Microcontroller (AT89S52) 

#include<reg51.h>
#include<stdio.h>
#define display_port P2      //Data pins connected to port 2 on microcontroller
#define keyport P1
#define DISPLAY_SIZE 9
sbit rs = P3^5;  //RS pin connected to pin 2 of port 3
sbit rw = P3^4;  // RW pin connected to pin 3 of port 3
sbit e =  P3^3;  //E pin connected to pin 4 of port 3

unsigned char keypad[4][4] =	{
				{'7','8','9','A'},
				{'4','5','6','B'},
				{'1','2','3','C'},
				{'F','0','E','D'}
               };

unsigned char colloc, rowloc;
bit firstchar;
///////////////////////////////////////////
long ascii2dec (char *buffer)
// Convert the ASCII string into the floating point number.
 { long data value;
   long  data digit;
   int sign=1;
   if(*buffer=='-'){
         sign=-1;
         buffer++;
        }
   value = 0;
   while (*buffer != ' ')
      { digit = *buffer - 48;
	    value = value*10 + digit;
        buffer++;
	  }
   return sign*value;
 }
/////////////////////////////////////////////////////////////
int numDigits( long n){
 int x=0;
 while(n!=0){
					x++;
					n/=10;
				 }
 return x;
}
///////////////////////////////////////////
void num2ascii(long n,char buff[]){
  char *p=buff;
  int b,x;
  x=numDigits(n);
  if(n>=0){
              p=p+x-1;}
  else{
            *p='-'; 
			p=p+x;
			n*=-1;
			}
  while(n!=0){
		b=n%10;
		*p=b+48;
		p--;
        n/=10;
   }
}
///////////////////////////////////////////
void msdelay(unsigned int time)  // Function for creating delay in milliseconds.
{
    unsigned i,j ;
    for(i=0;i<time;i++)    
		for(j=0;j<1275;j++);
}
///////////////////////////////////////////
void lcd_cmd(unsigned char command)  //Function to send command instruction to LCD
{
    display_port = command;
    rs= 0;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
///////////////////////////////////////////
void lcd_data(unsigned char disp_data)  //Function to send display data to LCD
{
    display_port = disp_data;
    rs= 1;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
/////////////////////////////////////////////
 void lcd_init()    //Function to prepare the LCD  and get it ready
{
    lcd_cmd(0x38);  // for using 2 lines and 5X7 matrix of LCD
    msdelay(10);
    lcd_cmd(0x0F);  // turn display ON, cursor blinking
    msdelay(10);
    lcd_cmd(0x01);  //clear screen
    msdelay(10);
    lcd_cmd(0x80);  // bring cursor to position 1 of line 1
    msdelay(10);
}
//////////////////////////////////////////////////////////////////////////////
unsigned char key_detect()
{
	keyport=0xF0;			/*set port direction as input-output*/
	do
	{
		keyport = 0xF0;				
		colloc = keyport;
		colloc&= 0xF0;	/* mask port for column read only */
	}while(colloc != 0xF0);		/* read status of column */
	
	do
	{
		do
		{
			msdelay(20);	/* 20ms key debounce time */
			colloc = (keyport & 0xF0);	/* read status of column */
		}while(colloc == 0xF0);	/* check for any key press */
		
		msdelay(1);
		colloc = (keyport & 0xF0);
	}while(colloc == 0xF0);
			
	while(1)
	{
		/* now check for rows */
		keyport= 0xFE;											/* check for pressed key in 1st row */
		colloc = (keyport & 0xF0);
		if(colloc != 0xF0)
		{
			rowloc = 0;
			break;
		}

		keyport = 0xFD;									/* check for pressed key in 2nd row */
		colloc = (keyport & 0xF0);
		if(colloc != 0xF0)
		{
			rowloc = 1;
			break;
		}
			
	keyport = 0xFB;			/* check for pressed key in 3rd row */
	colloc = (keyport & 0xF0);
	if(colloc != 0xF0)
	{
		rowloc = 2;
		break;
	}

	keyport = 0xF7;			/* check for pressed key in 4th row */
	colloc = (keyport & 0xF0);
	if(colloc != 0xF0)
	{
		rowloc = 3;
		break;
	}	
}
	
	if(colloc == 0xE0)
	{
		return(keypad[rowloc][0]);
	}		
	else if(colloc == 0xD0)
	{
		return(keypad[rowloc][1]);
	}	
	else if(colloc == 0xB0)
	{
		return(keypad[rowloc][2]);
	}	
	else
	{
		return(keypad[rowloc][3]);
	}	
}
////////////////////////////////////////////
void emptyBuff( char buff[]){
int i;
for( i=0;i<DISPLAY_SIZE ;i++)
    buff[i]=' ';
}
////////////////////////////////////////////
int isdigit(unsigned char ch){
  if(firstchar && ch=='-'){
        return 1;
    }      
  return ( ch>='0' && ch<='9');
}
//////////////////////////////////////////
void dispBuffer(char buff[])
{
int i=0; 
 while(buff[i] != ' '){
			lcd_data(buff[i]);
			i++;
       }
}
  
void lcd_string(unsigned char str[]){
    int i;
    for(i=0;str[i]!='\0';i++){
    lcd_data(str[i]);
    }

}

void lcd_result_tobinary(unsigned int result){
    int i;
    char c;
    char buffer[17]="000000000000\0";
    for(i=15;i>=0;i--){
        c=result%2+'0';
        buffer[i]=c;
        result=result/2;
    }
   lcd_string(buffer);
}
void conhex(unsigned int result) {
     int i;
   char hex[4];
   sprintf(hex, "%X", result);
   	    msdelay(1);
    for(i = 0; i < 4; i++) {
	 lcd_data(hex[i]);
      }
}
// binary gibi fonks yaz
unsigned int main(void)
{
unsigned char ch;
 unsigned int i;
 unsigned int numb1;
 unsigned int numb2;
 unsigned int result;


lcd_init();	
    while(1){
    lcd_cmd(0x80);
    lcd_string("number1=");
    
     for(i=0;i<4;i++){
        ch=key_detect();
        lcd_data(ch);
        if(ch<='F' && ch>='A'){
           numb1=numb1*16+(ch-'A'+10);
        }
        else{
           numb1=numb1*16+(ch-'0');
        }
       // decToBin(numb,1,binary1);
     }
         lcd_cmd(0xC0);

      lcd_string("number2=");
    
     for(i=0;i<4;i++){
        ch=key_detect();
        lcd_data(ch);
        if(ch<='F' && ch>='A'){
           numb2=numb2*16+(ch-'A'+10);
        }
        else{
           numb2=numb2*16+(ch-'0');
        }
       // decToBin(numb,1,binary1);
     }
    lcd_cmd(0x01);
    
    lcd_cmd(0x80);                       // 2. screen
    lcd_string("Select Operator");
    msdelay(200);
    lcd_cmd(0x01);
    
    lcd_cmd(0x80);                       // 3. screen
    lcd_string("1-AND  2-OR");
    lcd_cmd(0xC0);
    lcd_string("3-XOR  4-NOR");
    for(i=0;i<1;i++){
        ch=key_detect();
        lcd_data(ch);
        if(ch=='1'){
           result=numb1&numb2;    // and 
        }
	else if(ch=='2'){
           result=numb1|numb2;    // or
        }
	else if(ch=='3'){
           result=numb1^numb2;    // xor
        }
	else if(ch=='4'){
            result= ~(numb1|numb2);    // nor ??????_??????????????
        }
    
     }

    lcd_cmd(0x01);
    
    lcd_cmd(0x80);  //   4. screen     
       conhex( result);          
      lcd_cmd(0xC0);
      lcd_result_tobinary(result);  // 
      
   msdelay(3000);  // 
    lcd_cmd(0x01);
      }		
      
}

